/* 액션 타입 선언 */
const ADD_LIST = 'bloglists/ADD_LIST';
const EDIT_LIST = 'bloglists/EDIT_LIST';
const DEL_LIST = 'bloglists/DEL_LIST';
const SELECT_LIST = 'bloglists/SELECT_LIST';
/* 액션 생성함수 선언 */
let nextId = 10; // lists 데이터에서 사용 할 고유 id
export const addList = list => ({
  type: ADD_LIST,
  list: {
    ...list,
    id: nextId++, // 새 항목을 추가하고 nextId 값에 1을 더해줍니다.
  }
});
export const editList = (id,list) => ({
  type: EDIT_LIST,
  list: {
    ...list,
    id: id
  },
  id: id
});
export const delList = id => ({
  type: DEL_LIST,
  id
});
export const selectList = id => ({
  type: SELECT_LIST,
  id
})
/* 초기 상태 선언 */
const initialState = {
 lists: [
    {
      id: 1,
      src: "images/mainimg1.jpeg",
      title: "인프콘 2022 회고",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: '사실 인프런을 잘 사용하는 편은 아니였다.',
      desc: `사실 인프런을 잘 사용하는 편은 아니였다.
  
      교육기관을 다녔기에 입문자 수준의 영상으로 도움 받기는 힘들었고
      그 외 다양한 영상이 있었지만, 나는 영상매체에 집중을 못하는 편이라 사용하지 않았다.
      그럼에도 가보고싶었다. 누군가의 경험을 들을 수 있는 기회는 자주 오는 편이 아니기에.
      
      결론만 말하면 즐겁게 다녀왔다!
      
      입사한지 5일만에 컨퍼런스를 보내주신 우리 회사에게 감사를...^^....
      
      컨퍼런스의 꽃은 기업 부스 털기다!
      사실 이런 컨퍼런스보다는 나는 지스타에 조금 더 익숙한 편이였다.
      
      NDC는 3회정도 가보긴 했지만 거긴 넥슨 사옥에서 하다보니 기업부스가 따로 없고 (와 넥슨에서 타사가 채용하려고하면 ㅋㅋ)
      강연만 있다보니, 지스타에 조금 더 가깝다는 생각이 들었다.
      
      그래서 열심히 털어왔다!
      일부로 엄청 일찍 가서 더더욱 잘 털어왔다. (행사장에 12시에 도착함!)
      무신사도 좀 털어올껄 무신사랑 제트브레인은 뭔가....뭔가 아우라가 미묘해서 다가가지 못했다 ㅠ_ㅠ 엄청 아쉽다..`,
      userSrc: "",
      userId: "kig"
    },
    {
      id: 2,
      src: "images/mainimg2.png",
      title: "JavaScript 패키지 매니저 비교 - npm, Yarn 또는 pnpm?",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: 'Article 번역',
      desc: `오늘날 패키지 매니저 분야에는 세 가지 주요 플레이어가 있습니다.

      npm
      Yarn — Yarn이 Yarn Classic (< v2) 또는 좀 더 최신 버전인 Yarn Berry(≥ v2)를 참조할 수 있단 걸 곧 알게 될 것입니다.
      고성능(performant) npm (pnpm)
      사실상, 모든 패키지 매니지의 기능은 거의 동일합니다. 그래서 설치 속도나 스토리지 사용량, 기존 워크플로와 결합되는 방식 등 기능 외적인 요구 사항을 기준으로 사용할 패키지 매니저를 결정하게 됩니다.
      
      물론 각 패키지 매니저를 사용하는 방법은 다르지만 모두 중요한 컨셉은 공유합니다. 이러한 패키지 매니저로 다음을 수행할 수 있습니다.
      
      메타데이터 처리 및 쓰기
      모든 의존성을 일괄(Batch) 설치 또는 업데이트
      의존성 추가, 업데이트 및 제거
      스크립트 실행
      패키지 배포(publish)
      보안 감사(audit) 수행`,
      userSrc: "",
      userId: "lge"
    },
    {
      id: 3,
      src: "images/mainimg3.png",
      title: "자바스크립트 이론 부시기",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: '어린 시절에 상상한 개발자',
      desc: `초등학생 시절에는 개발자라고 하면 영어로 된 무언가를 입력해서 원하는 프로그램을 뚝딱뚝딱 만드는 사람이었다. 하지만 개발자로 성장하면서 다양한 분야의 개발이 있어 직군마다 똑같은 영어를 두드리는 것이 아니라 개발 직무에 맞는 언어가 있다는 사실을 알게되었다. 예시로 BackEnd에서는 Java, Kotlin, Python, JavaScript 등을 많이 사용한다. Android는 Java, Kotlin을 사용하고, IOS는 Swift를 사용하며 Web FrontEnd에서는 JavaScript를 사용한다.




      그런데 생각해보니 뭔가 조금 이상하다. 다른 직군은 다양한 언어중에 많이 사용하는 언어가 정해져 있어도 다른 언어도 사용하기는 한다. 한국에서 BackEnd 개발자는 Java를 많이 사용하지만, 프로젝트의 목적이나 개발자 취향에 맞게 JavaScript를 이용하기도 한다는 것이다. 하지만 FrontEnd는 압도적으로 JavaScript다.
      
      자바스크립트를 사용하다보면 위의 짤처럼 이해할 수 없는 부분들이 있다. 그럼에도 프론트엔드 개발자들은 JavaScript(TypeScript는 필수..!)를 사용한다는 것이다. 그렇다면 완벽하지 않은 이 언어를 프론트엔드에서는 왜 선택한 것일까? 더불어 자바스크립트는 웹에서 어떤식으로 동작할까? 오늘의 주제는 자바스크립트로 코딩하는 것이 아니다. 자바스크립트에 대해 이야기 하면서 마주치는 개념들에 대해 알아볼 것이다.
      
      
      자바스크립트의 탄생
      1993년에 처음으로 Netscape라는 정적인 웹사이트가 등장했다. 웹사이트라기 보다는 웹문서에 가까워서 동적으로 만들기 위해 브렌든 아이크는 10일만에 Mocha를 만들었다.추후에 Java의 인기가 많다며 이름을 JavaScript로 지어버렸다. 이렇게 JavaScript 등장 이후 DOM 요소의 조작이 가능해졌다.`,
      userSrc: "",
      userId: "pak"
    },
    {
      id: 4,
      src: "images/mainimg4.png",
      title: "KOSA를 모르는 축복받은 개발자들에게",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: 'KOSA 간판 개발자들',
      desc: `내가 KOSA 욕하는 글을 올렸고, 그리고 SI 업체에서 Vue 쓰는 이유를 올렸었다.
      그러나 생각보다 많은 개발자들의 반응을 올렸었는데,
      KOSA 욕하는 개발자는 정말 KOSA 보유 개발자들에게 욕 디지게 쳐먹었고. (그땐 일반화한 내 과오도 있다)
      SI 가 Vue 많이 쓰는 이유도 SI 해본 적 없는 축복받은 개발자들에게 개소리 싸지르지 말라고 욕 디지게 쳐먹었다.
      
      여기서, 후자 글의 경우는 근거자료가 정말 나에겐 당황 그 자체였는데.
      (결론적으로는 내게 반박할 근거도 아닌 걸 근거랍시고 올렸다)
      
      대부분 내게 반박한 근거를 요약하자면 이랬다.
      
      잡플래닛, 원티드 등의 요즘 개발자 구인구직 사이트 참조
      (SI/SM 개발자는 애초에 이런 곳 쳐다도 안 봄)
      압도적인(?) 리액트 개발자 구인구직 정보
      (SI/SM 출신의 몇몇 개발자들은 Strong Typed 아니라는 이유부터 시작해 자바스크립트를 혐오한다. 아니면 보조수단 그 이하. 타입스크립트 존재도 모른다.)
      내가 원하는 반박 근거는 이랬다.
      
      SI 프로젝트 개발 구인(헤드헌팅 등)란의 프론트엔드 기술 스택에 vue 보다 react가 많다는 근거
      하지만 내가 찾아봐도 당연하지만 없었다. 아직도 제이쿼리가 많은 거 실화?
      
      다시 돌아와서, 내가 KOSA를 욕했을 때, 생각보다 많은 개발자들이 내게 물었다.
      
      KOSA가 뭐에요?
      
      아뿔싸, KOSA를 모르는 축복받은 개발자들이 요즘 이렇게 많이 늘어났구나...
      
      그래서 오늘은 KOSA의 역사와 함께 선대 개발자가 핍박(?)받았던 역사를 간략하게 싸질러 보고자 한다.
      
      TL;DR; KOSA는 영원히 개 쓰레기 자격증명이다.
      이딴 걸 연마다 돈 받고 관리해야 한다고? 씨ㅂ...
      
      KOSA 가 생긴 이유
      거의 20년전으로 거슬러 올라갔을 거다. 그래. 거의 20년 전...
      먼저, KOSA 홈페이지를 소개하도록 하겠다. 클릭하라.
      
      소프트웨어 기술자 경력관리시스템
      
      이 때엔 여러분이 몸담구는 패키지 및 솔루션 기반의 소프트웨어보다 SI/SM 을 위시한 소프트웨어 외주 개발이 압도적인 시장이었던 때다.
      또한, 지금은 많이 줄었지만, 인력파견기업의 중간 갈취를 위해 개발자의 허위학력과 허위경력이 판을 쳤고, 정작 개발 업무를 주었으나 기대에 못미쳐 일정을 지키지 못하는 경우가 많아져, 이런 경력관리에 대한 증명이 필요하다는 목소리가 높아졌다.
      그래서 소프트웨어산업협회는, 이를 체계적으로, 객관적으로 관리하는 KOSA, 국내 개발자의 경력관리시스템을 만들기에 이르렀다.
      
      근데, 이게 생겨도 허위학력과 허위경력은 좀처럼 줄지 않았다. 하지만, 시도는 좋았다.
      왜냐면 최소한 국가 및 공공 프로젝트는 이 KOSA 증명을 통해 어느정도 허위 개발자들을 걸러낼 수 있었다.
      그리고 이 제도로 득을 본 대표적 프로젝트가 바로, 우리가 욕하면서 쓰고 있는 정부24다.
      정부24 프로젝트는 엘리트 학력을 가진 개발자들만 채용하여 비록 UX, 사용자에겐 개판이었지만, 업무체계에는 매우 긍정적 영향을 미쳐 개선하기 좋게 구축되어 있기 때문이다.
      물론 지금도 UX는 관련 전문가가 예나 지금이나 없기 때문에 기대할 수가 없다.
      
      하지만 민간기업에게는 이 KOSA가 금방 효과를 드러내지 못했는데,
      당시 국가 및 공공 프로젝트는 개발자 커리어에 중요한 영향을 미쳤던 시절이니만큼, 투입 경쟁이 있었다.
      그걸 KOSA 로 1차 필터링을 해서 양질의 개발자를 투입시킬 수 있었다.
      그에 반해 민간기업도 이 트랜드를 따라 KOSA 자격 증명이 되는 개발자를 구했지만...
      오히려 미달나는 사태가 일어나 프로젝트 진행에 차질이 많이 빚어졌다.
      그렇다 보니, "긴급투입" 파견 개발자를 조금이라도 돈 더 줘서, KOSA 안 보고 뽑는 사태가 일어난 것,
      하지만 인력파견업체는 이 기회를 놓칠새라, 허위학력과 허위경력 개발자가 틈새시장을 노렸다.
      허위경력 개발자는 실질적으로 실력없는 개발자라는 이유로 등급 대비 적은 단가를 받고,
      거의 절반 가까이 인력파견업체가 꿀꺽하는 일이 당시엔 흔했다.
      당연히 나도다.
      
      하지만, KOSA 의 빛은 금방 사라졌다.`,
      userSrc: "",
      userId: "kbu"
    },
    {
      id: 5,
      src: "images/mainimg1.jpeg",
      title: "[밥타] 서비스 개발 후기",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: '회고록',
      desc: `시작하게 된 계기
      처음 서비스에 대한 아이디어를 떠올리게 된 건 18년도 여름, 1학년 때였다. 개발에 대한 지식도 전무했을 때였고, 아는 것이라고는 학교에서 배운 c언어가 전부였기에 아이디어로만 남아있었는데, 인턴으로 Object detection 모델을 개발하는 일을 하게 되면서 예전에 내가 하고 싶었던 아이디어를 구현할 수 있겠다는 생각을 하게 되었다.
      
      그러나 시험기간 때도 그러하듯, 오늘 할 일은 내일의 내가 하기 때문에 미루고만 있다가, 동기 중 한 명이 "그것 참 흥미롭네" 하고 프론트 개발을 하겠다고 했다. (아마 혼자 하려 했다면 아직도 완성 못 하지 않았을까...?)
      
      그렇게 퇴근 후 틈틈히 개발을 시작하게 되었다.
      
      개발 기간, 협업 방식
      원래 예상한 개발 기간은 1달이었다. 규모가 큰 서비스도 아니고, 나도 그렇고 동기도 그렇고 프로젝트 경험이 있어서 개발에 어려움을 겪을 것 같지도 않았기 때문이다. 또한, 개발 전 기획 회의에서 미리 개발에 필요한 api들과, req, res 형식까지 확정지었기 때문에 정말 개발만 하면 됐다.
      
      그래서 실질적으로 하루에 개발할 수 있는 시간은 퇴근한 후였음에도, 일주일에 2~3일? 정도 하루 1시간 정도 투자해서 여유롭게 개발했던 것 같다.`,
      userSrc: "",
      userId: "lim"
    },
    {
      id: 6,
      src: "images/mainimg2.png",
      title: "F12의 눈물나는 쿼리 개선기 - 이론편",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: '우아한테크코스 4기',
      desc: `우아한테크코스에서는 팀 프로젝트를 진행중입니다. 그 중 이번 5차 데모 데이의 백엔드 요구 사항으로 다음과 같은 부분이 있었습니다.

      서비스에서 사용하는 쿼리를 정리하고, 각 쿼리에서 사용하는 인덱스 설정
      서비스에서 사용하는 모든 조회 쿼리와 테이블에 설정한 인덱스 공유
      인덱스를 설정할 수 없는 쿼리가 있는 경우, 인덱스를 설정할 수 없는 이유 공유
      레벨 3 8주동안 열심히 테이블을 설계하고 코드를 작성했지만, 쿼리의 성능과 인덱스에 대한 정리는 하나도 되어 있지 않은 상태였습니다. 무엇보다 어떤 쿼리가 성능이 잘 나오고, 어떤 쿼리가 성능이 잘 나오지 않는지 데이터베이스에 대한 지식이 약하다보니 데이터베이스를 어떻게 튜닝해야 할지도 감이 오지 않았습니다. 인덱스를 설정하라고 하는데, 어떤 컬럼에 인덱스를 적용해야 쿼리가 개선되는지도 판단할 수 없었습니다. 그래서 유의미한 성능 개선을 하기 위해 nGrinder로 성능 테스트를 진행해보기로 했습니다.
      
      쿼리 개선 과정에 대한 이해를 돕기 위해 간단한 ERD를 그려보았습니다.`,
      userSrc: "",
      userId: "yak"
    },
    {
      id: 7,
      src: "images/mainimg3.png",
      title: "Back-end Framework 선정 기준",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: 'Web',
      desc: `1. 글을 적는 이유
      (Back-end Framework를 선정하는 기준이 궁금하다!)
      처음 웹 개발을 할 때 주변 사람들에게 Framework 선정은 매우 중요하다는 소리를 들었다. 때문에 Framework를 선정하는 기준에 대한 궁금증이 생겼다. 다룰 줄 아는 프로그래밍 언어가 유일하거나, 유독 자신 있는 언어가 있었다면 선택권이 없기 때문에 그 언어의 Framework로 진행하겠지만, 개발 공부를 시작한 대학교 1학년 시절부터 학교 커리큘럼을 따라가다 보니 자연스럽게 Back-end와 관련된 다양한 언어들을 다룰 수 있게 되었고, 나에게 선택권이 주어졌기 때문에 어떤 Framework를 선택해야 좋은지에 대한 의문점이 생겼다.
      
      2. Framework의 선정의 기준은 무엇인가?
      (내가 만들려는 웹의 특징은 무엇인가?)
      처음 웹 개발을 시작했을 때는 웹과 Framework에 대한 지식이 정말 하나도 없던 시절이었기 때문에 Framework마다 구현할 수 있는 기능이 완전히 다른 줄 알았다.
      
      하지만 알아본 결과 모든 Framework가 웹을 개발할 때 필요한 일반적인 기능들은 구현 가능하고, Framework마다 특정 기능을 구현할 수 있는 디테일적인 차이가 있던 것이었다.
      
      즉,
      Framework마다 각자의 장점이 있기 때문에 그 부분이 내가 만들려는 웹의 특징과 대응되는 Framework를 선정하면 된다는 뜻이다.
      
      3. 각 Framework 분석
      3-1. Express(JavaScript)
      
      
      비교적 편하고 생산성이 높은 개발을 하고 싶다.
      
      1) JavaScript로 개발.
      2) 싱글스레드, 이벤트 드리블 방식으로 인한 빠른 네트워크 처리.
      3) npm을 통한 손쉬운 모듈 사용.
      4) 클라우드 서비스와 호환이 좋음.
      5) 확장성.
      여러 가지 장점이 있지만 가장 큰 장점은 JS로 개발한다는 점이다.
      
      웹은 Client + Server + DB가 하나의 연결고리를 갖는다. Express로 개발한다면 Client(Front-end)의 코드와 엄청난 호환성을 갖게 되며, Sequelize와 Mongoose를 이용하여 DB까지 사용할 수 있어서 JS라는 한 개의 언어로 Client, Server, DB를 모두 개발할 수 있게 된다.
      (물론 Front-end를 완벽하게 구사하기 위해선 추가적인 것들이 필요하다.)
      
      또한 빠른 네트워크 처리 또한 장점이며 npm을 통한 다양하고 질 좋은 Node 모듈의 쉬운 사용과 클라우드 서비스와의 호환이 좋은 것도 편하고 간단한 개발을 도와준다.
      
      마지막으로 객체지향 개념을 도입하고, JS의 단점을 보완한 TS를 이용하는 Nest.js로의 확장이 가능하다.`,
      userSrc: "",
      userId: "lin"
    },
    {
      id: 8,
      src: "images/mainimg4.png",
      title: "인프콘 2022 회고",
      registdate: '2022-08-31',
      dayCount: 4,
      commentCount: 5,
      headdesc: '사실 인프런을 잘 사용하는 편은 아니였다.',
      desc: `사실 인프런을 잘 사용하는 편은 아니였다.
  
      교육기관을 다녔기에 입문자 수준의 영상으로 도움 받기는 힘들었고
      그 외 다양한 영상이 있었지만, 나는 영상매체에 집중을 못하는 편이라 사용하지 않았다.
      그럼에도 가보고싶었다. 누군가의 경험을 들을 수 있는 기회는 자주 오는 편이 아니기에.
      
      결론만 말하면 즐겁게 다녀왔다!
      
      입사한지 5일만에 컨퍼런스를 보내주신 우리 회사에게 감사를...^^....
      
      컨퍼런스의 꽃은 기업 부스 털기다!
      사실 이런 컨퍼런스보다는 나는 지스타에 조금 더 익숙한 편이였다.
      
      NDC는 3회정도 가보긴 했지만 거긴 넥슨 사옥에서 하다보니 기업부스가 따로 없고 (와 넥슨에서 타사가 채용하려고하면 ㅋㅋ)
      강연만 있다보니, 지스타에 조금 더 가깝다는 생각이 들었다.
      
      그래서 열심히 털어왔다!
      일부로 엄청 일찍 가서 더더욱 잘 털어왔다. (행사장에 12시에 도착함!)
      무신사도 좀 털어올껄 무신사랑 제트브레인은 뭔가....뭔가 아우라가 미묘해서 다가가지 못했다 ㅠ_ㅠ 엄청 아쉽다..`,
      userSrc: "",
      userId: "bak"
    },
    {
      id: 9,
      src: "images/mainimg1.jpeg",
      title: "인프콘 2022 회고",
      registdate: '2022-08-31',
      dayCount: 4,
      commentCount: 5,
      headdesc: '사실 인프런을 잘 사용하는 편은 아니였다.',
      desc: `사실 인프런을 잘 사용하는 편은 아니였다.
  
      교육기관을 다녔기에 입문자 수준의 영상으로 도움 받기는 힘들었고
      그 외 다양한 영상이 있었지만, 나는 영상매체에 집중을 못하는 편이라 사용하지 않았다.
      그럼에도 가보고싶었다. 누군가의 경험을 들을 수 있는 기회는 자주 오는 편이 아니기에.
      
      결론만 말하면 즐겁게 다녀왔다!
      
      입사한지 5일만에 컨퍼런스를 보내주신 우리 회사에게 감사를...^^....
      
      컨퍼런스의 꽃은 기업 부스 털기다!
      사실 이런 컨퍼런스보다는 나는 지스타에 조금 더 익숙한 편이였다.
      
      NDC는 3회정도 가보긴 했지만 거긴 넥슨 사옥에서 하다보니 기업부스가 따로 없고 (와 넥슨에서 타사가 채용하려고하면 ㅋㅋ)
      강연만 있다보니, 지스타에 조금 더 가깝다는 생각이 들었다.
      
      그래서 열심히 털어왔다!
      일부로 엄청 일찍 가서 더더욱 잘 털어왔다. (행사장에 12시에 도착함!)
      무신사도 좀 털어올껄 무신사랑 제트브레인은 뭔가....뭔가 아우라가 미묘해서 다가가지 못했다 ㅠ_ㅠ 엄청 아쉽다..`,
      userSrc: "",
      userId: "jay"
    },
    {
      id: 10,
      src: "images/mainimg2.png",
      title: "인프콘 2022 회고",
      dayCount: 4,
      commentCount: 5,
      registdate: '2022-08-31',
      headdesc: '사실 인프런을 잘 사용하는 편은 아니였다.',
      desc: `사실 인프런을 잘 사용하는 편은 아니였다.
  
      교육기관을 다녔기에 입문자 수준의 영상으로 도움 받기는 힘들었고
      그 외 다양한 영상이 있었지만, 나는 영상매체에 집중을 못하는 편이라 사용하지 않았다.
      그럼에도 가보고싶었다. 누군가의 경험을 들을 수 있는 기회는 자주 오는 편이 아니기에.
      
      결론만 말하면 즐겁게 다녀왔다!
      
      입사한지 5일만에 컨퍼런스를 보내주신 우리 회사에게 감사를...^^....
      
      컨퍼런스의 꽃은 기업 부스 털기다!
      사실 이런 컨퍼런스보다는 나는 지스타에 조금 더 익숙한 편이였다.
      
      NDC는 3회정도 가보긴 했지만 거긴 넥슨 사옥에서 하다보니 기업부스가 따로 없고 (와 넥슨에서 타사가 채용하려고하면 ㅋㅋ)
      강연만 있다보니, 지스타에 조금 더 가깝다는 생각이 들었다.
      
      그래서 열심히 털어왔다!
      일부로 엄청 일찍 가서 더더욱 잘 털어왔다. (행사장에 12시에 도착함!)
      무신사도 좀 털어올껄 무신사랑 제트브레인은 뭔가....뭔가 아우라가 미묘해서 다가가지 못했다 ㅠ_ㅠ 엄청 아쉽다..`,
      userSrc: "",
      userId: "jay"
    }, 
  ],
  selectList: {
    id: 10,
    src: "images/mainimg2.png",
    title: "인프콘 2022 회고",
    registdate: '2022-08-31',
    dayCount: 4,
    commentCount: 5,
    headdesc: '사실 인프런을 잘 사용하는 편은 아니였다.',
    desc: `사실 인프런을 잘 사용하는 편은 아니였다.

    교육기관을 다녔기에 입문자 수준의 영상으로 도움 받기는 힘들었고
    그 외 다양한 영상이 있었지만, 나는 영상매체에 집중을 못하는 편이라 사용하지 않았다.
    그럼에도 가보고싶었다. 누군가의 경험을 들을 수 있는 기회는 자주 오는 편이 아니기에.
  
    결론만 말하면 즐겁게 다녀왔다!
  
    입사한지 5일만에 컨퍼런스를 보내주신 우리 회사에게 감사를...^^....
  
    컨퍼런스의 꽃은 기업 부스 털기다!
    사실 이런 컨퍼런스보다는 나는 지스타에 조금 더 익숙한 편이였다.
  
    NDC는 3회정도 가보긴 했지만 거긴 넥슨 사옥에서 하다보니 기업부스가 따로 없고 (와 넥슨에서 타사가 채용하려고하면 ㅋㅋ)
    강연만 있다보니, 지스타에 조금 더 가깝다는 생각이 들었다.
  
    그래서 열심히 털어왔다!
    일부로 엄청 일찍 가서 더더욱 잘 털어왔다. (행사장에 12시에 도착함!)
    무신사도 좀 털어올껄 무신사랑 제트브레인은 뭔가....뭔가 아우라가 미묘해서 다가가지 못했다 ㅠ_ㅠ 엄청 아쉽다..`,
    userSrc: "",
    userId: "bim"
  }
}


export default function bloglists(state = initialState, action) {
  switch (action.type) {
    case ADD_LIST:
      return {
        ...state,
        lists: state.lists.concat(action.list)
      }
    case SELECT_LIST: 
      return {
        ...state,
        selectList: state.lists.find(list=> list.id === action.id)
      }
    default:
      return state;
  }
}